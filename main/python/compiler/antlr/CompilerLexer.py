# Generated from ./antlr/Compiler.g4 by ANTLR 4.5.3
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2-")
        buf.write("\u0113\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3")
        buf.write("\b\3\b\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\20\3")
        buf.write("\21\3\21\3\21\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u00d7\n")
        buf.write("%\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\6(\u00e1\n(\r(\16(\u00e2")
        buf.write("\3)\3)\3)\3)\7)\u00e9\n)\f)\16)\u00ec\13)\3*\3*\3*\3*")
        buf.write("\7*\u00f2\n*\f*\16*\u00f5\13*\3*\3*\3*\3*\3*\3+\3+\3+")
        buf.write("\5+\u00ff\n+\3+\7+\u0102\n+\f+\16+\u0105\13+\3+\3+\3,")
        buf.write("\6,\u010a\n,\r,\16,\u010b\3,\3,\3-\3-\3.\3.\3\u00f3\2")
        buf.write("/\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O")
        buf.write(")Q*S+U,W-Y\2[\2\3\2\6\4\2\f\f\17\17\5\2\13\f\17\17\"\"")
        buf.write("\4\2C\\c|\3\2\62;\u0119\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3")
        buf.write("\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2")
        buf.write("\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2")
        buf.write("\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2")
        buf.write("!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2")
        buf.write("\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3")
        buf.write("\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2")
        buf.write("\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2")
        buf.write("\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2")
        buf.write("\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\3]\3")
        buf.write("\2\2\2\5_\3\2\2\2\7a\3\2\2\2\tc\3\2\2\2\13e\3\2\2\2\r")
        buf.write("g\3\2\2\2\17i\3\2\2\2\21k\3\2\2\2\23m\3\2\2\2\25p\3\2")
        buf.write("\2\2\27r\3\2\2\2\31u\3\2\2\2\33x\3\2\2\2\35{\3\2\2\2\37")
        buf.write("}\3\2\2\2!\u0081\3\2\2\2#\u0084\3\2\2\2%\u0088\3\2\2\2")
        buf.write("\'\u008b\3\2\2\2)\u008e\3\2\2\2+\u0090\3\2\2\2-\u0093")
        buf.write("\3\2\2\2/\u0099\3\2\2\2\61\u009e\3\2\2\2\63\u00a5\3\2")
        buf.write("\2\2\65\u00a7\3\2\2\2\67\u00a9\3\2\2\29\u00ab\3\2\2\2")
        buf.write(";\u00b1\3\2\2\2=\u00b4\3\2\2\2?\u00b9\3\2\2\2A\u00be\3")
        buf.write("\2\2\2C\u00c2\3\2\2\2E\u00c7\3\2\2\2G\u00c9\3\2\2\2I\u00d6")
        buf.write("\3\2\2\2K\u00d8\3\2\2\2M\u00da\3\2\2\2O\u00e0\3\2\2\2")
        buf.write("Q\u00e4\3\2\2\2S\u00ed\3\2\2\2U\u00fe\3\2\2\2W\u0109\3")
        buf.write("\2\2\2Y\u010f\3\2\2\2[\u0111\3\2\2\2]^\7*\2\2^\4\3\2\2")
        buf.write("\2_`\7+\2\2`\6\3\2\2\2ab\7/\2\2b\b\3\2\2\2cd\7,\2\2d\n")
        buf.write("\3\2\2\2ef\7\61\2\2f\f\3\2\2\2gh\7\'\2\2h\16\3\2\2\2i")
        buf.write("j\7-\2\2j\20\3\2\2\2kl\7>\2\2l\22\3\2\2\2mn\7>\2\2no\7")
        buf.write("?\2\2o\24\3\2\2\2pq\7@\2\2q\26\3\2\2\2rs\7@\2\2st\7?\2")
        buf.write("\2t\30\3\2\2\2uv\7?\2\2vw\7?\2\2w\32\3\2\2\2xy\7#\2\2")
        buf.write("yz\7?\2\2z\34\3\2\2\2{|\7#\2\2|\36\3\2\2\2}~\7p\2\2~\177")
        buf.write("\7q\2\2\177\u0080\7v\2\2\u0080 \3\2\2\2\u0081\u0082\7")
        buf.write("(\2\2\u0082\u0083\7(\2\2\u0083\"\3\2\2\2\u0084\u0085\7")
        buf.write("c\2\2\u0085\u0086\7p\2\2\u0086\u0087\7f\2\2\u0087$\3\2")
        buf.write("\2\2\u0088\u0089\7~\2\2\u0089\u008a\7~\2\2\u008a&\3\2")
        buf.write("\2\2\u008b\u008c\7q\2\2\u008c\u008d\7t\2\2\u008d(\3\2")
        buf.write("\2\2\u008e\u008f\7?\2\2\u008f*\3\2\2\2\u0090\u0091\7@")
        buf.write("\2\2\u0091\u0092\7@\2\2\u0092,\3\2\2\2\u0093\u0094\7r")
        buf.write("\2\2\u0094\u0095\7t\2\2\u0095\u0096\7k\2\2\u0096\u0097")
        buf.write("\7p\2\2\u0097\u0098\7v\2\2\u0098.\3\2\2\2\u0099\u009a")
        buf.write("\7t\2\2\u009a\u009b\7g\2\2\u009b\u009c\7c\2\2\u009c\u009d")
        buf.write("\7f\2\2\u009d\60\3\2\2\2\u009e\u009f\7t\2\2\u009f\u00a0")
        buf.write("\7g\2\2\u00a0\u00a1\7v\2\2\u00a1\u00a2\7w\2\2\u00a2\u00a3")
        buf.write("\7t\2\2\u00a3\u00a4\7p\2\2\u00a4\62\3\2\2\2\u00a5\u00a6")
        buf.write("\7=\2\2\u00a6\64\3\2\2\2\u00a7\u00a8\7}\2\2\u00a8\66\3")
        buf.write("\2\2\2\u00a9\u00aa\7\177\2\2\u00aa8\3\2\2\2\u00ab\u00ac")
        buf.write("\7y\2\2\u00ac\u00ad\7j\2\2\u00ad\u00ae\7k\2\2\u00ae\u00af")
        buf.write("\7n\2\2\u00af\u00b0\7g\2\2\u00b0:\3\2\2\2\u00b1\u00b2")
        buf.write("\7k\2\2\u00b2\u00b3\7h\2\2\u00b3<\3\2\2\2\u00b4\u00b5")
        buf.write("\7g\2\2\u00b5\u00b6\7n\2\2\u00b6\u00b7\7u\2\2\u00b7\u00b8")
        buf.write("\7g\2\2\u00b8>\3\2\2\2\u00b9\u00ba\7x\2\2\u00ba\u00bb")
        buf.write("\7q\2\2\u00bb\u00bc\7k\2\2\u00bc\u00bd\7f\2\2\u00bd@\3")
        buf.write("\2\2\2\u00be\u00bf\7k\2\2\u00bf\u00c0\7p\2\2\u00c0\u00c1")
        buf.write("\7v\2\2\u00c1B\3\2\2\2\u00c2\u00c3\7d\2\2\u00c3\u00c4")
        buf.write("\7q\2\2\u00c4\u00c5\7q\2\2\u00c5\u00c6\7n\2\2\u00c6D\3")
        buf.write("\2\2\2\u00c7\u00c8\7Z\2\2\u00c8F\3\2\2\2\u00c9\u00ca\7")
        buf.write("+\2\2\u00ca\u00cb\7/\2\2\u00cb\u00cc\7@\2\2\u00ccH\3\2")
        buf.write("\2\2\u00cd\u00ce\7v\2\2\u00ce\u00cf\7t\2\2\u00cf\u00d0")
        buf.write("\7w\2\2\u00d0\u00d7\7g\2\2\u00d1\u00d2\7h\2\2\u00d2\u00d3")
        buf.write("\7c\2\2\u00d3\u00d4\7n\2\2\u00d4\u00d5\7u\2\2\u00d5\u00d7")
        buf.write("\7g\2\2\u00d6\u00cd\3\2\2\2\u00d6\u00d1\3\2\2\2\u00d7")
        buf.write("J\3\2\2\2\u00d8\u00d9\7.\2\2\u00d9L\3\2\2\2\u00da\u00db")
        buf.write("\7r\2\2\u00db\u00dc\7c\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de")
        buf.write("\7u\2\2\u00deN\3\2\2\2\u00df\u00e1\5[.\2\u00e0\u00df\3")
        buf.write("\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e2\u00e3")
        buf.write("\3\2\2\2\u00e3P\3\2\2\2\u00e4\u00ea\5Y-\2\u00e5\u00e9")
        buf.write("\5Y-\2\u00e6\u00e9\5[.\2\u00e7\u00e9\7a\2\2\u00e8\u00e5")
        buf.write("\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e8\u00e7\3\2\2\2\u00e9")
        buf.write("\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2")
        buf.write("\u00ebR\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ed\u00ee\7\61\2")
        buf.write("\2\u00ee\u00ef\7,\2\2\u00ef\u00f3\3\2\2\2\u00f0\u00f2")
        buf.write("\13\2\2\2\u00f1\u00f0\3\2\2\2\u00f2\u00f5\3\2\2\2\u00f3")
        buf.write("\u00f4\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f4\u00f6\3\2\2\2")
        buf.write("\u00f5\u00f3\3\2\2\2\u00f6\u00f7\7,\2\2\u00f7\u00f8\7")
        buf.write("\61\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fa\b*\2\2\u00faT")
        buf.write("\3\2\2\2\u00fb\u00ff\7%\2\2\u00fc\u00fd\7\61\2\2\u00fd")
        buf.write("\u00ff\7\61\2\2\u00fe\u00fb\3\2\2\2\u00fe\u00fc\3\2\2")
        buf.write("\2\u00ff\u0103\3\2\2\2\u0100\u0102\n\2\2\2\u0101\u0100")
        buf.write("\3\2\2\2\u0102\u0105\3\2\2\2\u0103\u0101\3\2\2\2\u0103")
        buf.write("\u0104\3\2\2\2\u0104\u0106\3\2\2\2\u0105\u0103\3\2\2\2")
        buf.write("\u0106\u0107\b+\2\2\u0107V\3\2\2\2\u0108\u010a\t\3\2\2")
        buf.write("\u0109\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u0109\3")
        buf.write("\2\2\2\u010b\u010c\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u010e")
        buf.write("\b,\2\2\u010eX\3\2\2\2\u010f\u0110\t\4\2\2\u0110Z\3\2")
        buf.write("\2\2\u0111\u0112\t\5\2\2\u0112\\\3\2\2\2\13\2\u00d6\u00e2")
        buf.write("\u00e8\u00ea\u00f3\u00fe\u0103\u010b\3\2\3\2")
        return buf.getvalue()


class CompilerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    BOOL = 36
    COMA = 37
    PASS = 38
    INT = 39
    ID = 40
    COMMENT = 41
    LINE_COMMENT = 42
    WS = 43

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'-'", "'*'", "'/'", "'%'", "'+'", "'<'", "'<='", 
            "'>'", "'>='", "'=='", "'!='", "'!'", "'not'", "'&&'", "'and'", 
            "'||'", "'or'", "'='", "'>>'", "'print'", "'read'", "'return'", 
            "';'", "'{'", "'}'", "'while'", "'if'", "'else'", "'void'", 
            "'int'", "'bool'", "'X'", "')->'", "','", "'pass'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL", "COMA", "PASS", "INT", "ID", "COMMENT", "LINE_COMMENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "BOOL", "COMA", "PASS", "INT", 
                  "ID", "COMMENT", "LINE_COMMENT", "WS", "ALPHA", "DIGIT" ]

    grammarFileName = "Compiler.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


